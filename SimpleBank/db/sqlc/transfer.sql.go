// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfers = `-- name: CreateTransfers :one
INSERT INTO transfers (
    from_accaunts_id,
    to_accaunts_id,
    amount
) VALUES (
    $1, $2, $3
) RETURNING id, from_accaunts_id, to_accaunts_id, amount, created_at
`

type CreateTransfersParams struct {
	FromAccauntsID int64 `json:"from_accaunts_id"`
	ToAccauntsID   int64 `json:"to_accaunts_id"`
	Amount         int64 `json:"amount"`
}

func (q *Queries) CreateTransfers(ctx context.Context, arg CreateTransfersParams) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, createTransfers, arg.FromAccauntsID, arg.ToAccauntsID, arg.Amount)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccauntsID,
		&i.ToAccauntsID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfers = `-- name: GetTransfers :one
SELECT id, from_accaunts_id, to_accaunts_id, amount, created_at FROM transfers
WHERE id =$1 LIMIT 1
`

func (q *Queries) GetTransfers(ctx context.Context, id int64) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, getTransfers, id)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccauntsID,
		&i.ToAccauntsID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_accaunts_id, to_accaunts_id, amount, created_at FROM transfers
WHERE
    from_accaunts_id = $1 OR
    to_accaunts_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	FromAccauntsID int64 `json:"from_accaunts_id"`
	ToAccauntsID   int64 `json:"to_accaunts_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfers, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers,
		arg.FromAccauntsID,
		arg.ToAccauntsID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfers
	for rows.Next() {
		var i Transfers
		if err := rows.Scan(
			&i.ID,
			&i.FromAccauntsID,
			&i.ToAccauntsID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
