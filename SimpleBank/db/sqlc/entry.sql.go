// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: entry.sql

package db

import (
	"context"
)

const createEnteries = `-- name: CreateEnteries :one
INSERT INTO enteries (
    accaunts_id,
    amount
) VALUES (
    $1, $2
) RETURNING id, accaunts_id, amount, created_at
`

type CreateEnteriesParams struct {
	AccauntsID int64 `json:"accaunts_id"`
	Amount     int64 `json:"amount"`
}

func (q *Queries) CreateEnteries(ctx context.Context, arg CreateEnteriesParams) (Enteries, error) {
	row := q.db.QueryRowContext(ctx, createEnteries, arg.AccauntsID, arg.Amount)
	var i Enteries
	err := row.Scan(
		&i.ID,
		&i.AccauntsID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEnteries = `-- name: GetEnteries :one
SELECT id, accaunts_id, amount, created_at FROM enteries
WHERE id =$1 LIMIT 1
`

func (q *Queries) GetEnteries(ctx context.Context, id int64) (Enteries, error) {
	row := q.db.QueryRowContext(ctx, getEnteries, id)
	var i Enteries
	err := row.Scan(
		&i.ID,
		&i.AccauntsID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEnteriess = `-- name: ListEnteriess :many
SELECT id, accaunts_id, amount, created_at FROM enteries
WHERE accaunts_id=$1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEnteriessParams struct {
	AccauntsID int64 `json:"accaunts_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListEnteriess(ctx context.Context, arg ListEnteriessParams) ([]Enteries, error) {
	rows, err := q.db.QueryContext(ctx, listEnteriess, arg.AccauntsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enteries
	for rows.Next() {
		var i Enteries
		if err := rows.Scan(
			&i.ID,
			&i.AccauntsID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
